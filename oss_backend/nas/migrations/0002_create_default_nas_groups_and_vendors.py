# Generated by Django 5.2.1 on 2025-05-17 10:15

from django.db import migrations


def create_default_nas_groups_and_vendors(apps, schema_editor):
    """
    Create default NAS groups and vendors.
    """
    # Get the models
    NasGroup = apps.get_model('nas', 'NasGroup')
    Vendor = apps.get_model('nas', 'Vendor')

    # Create default NAS groups
    cgnats, created = NasGroup.objects.get_or_create(
        name="CGNATs",
        defaults={
            'description': "Carrier-Grade NAT devices",
            'lft': 1,
            'rght': 2,
            'tree_id': 1,
            'level': 0
        }
    )

    hotspot_gateways, created = NasGroup.objects.get_or_create(
        name="Hotspot Gateways",
        defaults={
            'description': "Hotspot gateway devices",
            'lft': 1,
            'rght': 2,
            'tree_id': 2,
            'level': 0
        }
    )

    access_gateways, created = NasGroup.objects.get_or_create(
        name="Access Gateways",
        defaults={
            'description': "Network access gateway devices",
            'lft': 1,
            'rght': 2,
            'tree_id': 3,
            'level': 0
        }
    )

    # Create default vendor for Mikrotik
    mikrotik, created = Vendor.objects.get_or_create(
        vendor_id=14988,  # Mikrotik vendor ID
        defaults={
            'name': "Mikrotik",
            'description': "Mikrotik network equipment manufacturer"
        }
    )


def reverse_default_nas_groups_and_vendors(apps, schema_editor):
    """
    Reverse the creation of default NAS groups and vendors.
    """
    # Get the models
    NasGroup = apps.get_model('nas', 'NasGroup')
    Vendor = apps.get_model('nas', 'Vendor')

    # Delete default NAS groups
    NasGroup.objects.filter(name="CGNATs").delete()
    NasGroup.objects.filter(name="Hotspot Gateways").delete()
    NasGroup.objects.filter(name="Access Gateways").delete()

    # Delete default vendor
    Vendor.objects.filter(vendor_id=14988).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('nas', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(
            create_default_nas_groups_and_vendors,
            reverse_default_nas_groups_and_vendors
        ),
    ]
