# Generated by Django 5.2.1 on 2025-05-17 10:45

from django.db import migrations


def create_default_attribute_groups(apps, schema_editor):
    """
    Create default attribute groups and their attributes.
    """
    # Get the models
    AuthAttributeGroup = apps.get_model('radius', 'AuthAttributeGroup')
    RadiusAttribute = apps.get_model('radius', 'RadiusAttribute')

    # Create default attribute groups
    mikrotik_read_only, created = AuthAttributeGroup.objects.get_or_create(
        name="Mikrotik Read Only",
        defaults={
            'description': "Default group for Mikrotik read-only access",
            'is_system': True
        }
    )

    mikrotik_full, created = AuthAttributeGroup.objects.get_or_create(
        name="Mikrotik Full",
        defaults={
            'description': "Default group for Mikrotik full access",
            'is_system': True
        }
    )

    # Create default attributes for Mikrotik Read Only group
    if created or not RadiusAttribute.objects.filter(group=mikrotik_read_only).exists():
        RadiusAttribute.objects.get_or_create(
            group=mikrotik_read_only,
            vendor_id=14988,  # Mikrotik vendor ID
            attribute_id=1,   # Mikrotik-Group attribute ID
            defaults={
                'attribute_name': 'Mikrotik-Group',
                'attribute_type': 'string',
                'attribute_value': 'read'
            }
        )

    # Create default attributes for Mikrotik Full group
    if created or not RadiusAttribute.objects.filter(group=mikrotik_full).exists():
        RadiusAttribute.objects.get_or_create(
            group=mikrotik_full,
            vendor_id=14988,  # Mikrotik vendor ID
            attribute_id=1,   # Mikrotik-Group attribute ID
            defaults={
                'attribute_name': 'Mikrotik-Group',
                'attribute_type': 'string',
                'attribute_value': 'full'
            }
        )


def reverse_default_attribute_groups(apps, schema_editor):
    """
    Reverse the creation of default attribute groups and their attributes.
    """
    # Get the models
    AuthAttributeGroup = apps.get_model('radius', 'AuthAttributeGroup')
    RadiusAttribute = apps.get_model('radius', 'RadiusAttribute')

    # Delete attributes first to avoid foreign key constraints
    RadiusAttribute.objects.filter(
        group__name__in=["Mikrotik Read Only", "Mikrotik Full"]
    ).delete()

    # Delete attribute groups
    AuthAttributeGroup.objects.filter(name="Mikrotik Read Only").delete()
    AuthAttributeGroup.objects.filter(name="Mikrotik Full").delete()


class Migration(migrations.Migration):

    dependencies = [
        ('radius', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(
            create_default_attribute_groups,
            reverse_default_attribute_groups
        ),
    ]